using System;
using System.Text;
using System.Security.Cryptography;
using Microsoft.Web.Services2.Security.X509; 

namespace DigitalCertificate
{
	class DigCert
	{
		[STAThread]
		static void Main(string[] args)
		{
			string contractNote = "<CONTRACTNOTE>" 
				+"<SYMBOL>MSFT</SYMBOL>" 
				+"<QUANTITY>100</QUANTITY>"
				+"<PRICE>24</PRICE>"
				+"</CONTRACTNOTE>";

			byte[] contentBuffer = Encoding.ASCII.GetBytes(contractNote);
			//compute digital signature using broker private key
			byte[] signedData = SignDataBroker(contentBuffer);
			//verify digital signature using broker public key
			bool hashResult = VerifySignFM(contentBuffer,signedData) ;
			Console.WriteLine("Verification Result : " +hashResult);
		}

		public static byte[] SignDataBroker(byte[] data)
		{
			//parameters passed to cryptographic service provider
			CspParameters param = new CspParameters();
			//assign the key store name generated by makecert tool
			param.KeyContainerName = "STPKeyStore";
			//use the signature key pair
			param.KeyNumber = 2;
			//initialize RSA to use private key stored in STPKeyStore 
			RSACryptoServiceProvider rsCrypto = new RSACryptoServiceProvider(param);
			//compute digital signature 
			return rsCrypto.SignData(data, new SHA1Managed());
		}

		public static bool VerifySignFM(byte[] data,byte[] signedData)
		{
			//Open STP certificate store
			X509CertificateStore store = X509CertificateStore.CurrentUserStore("STPCertificateStore"); 
			store.OpenRead();
			//retrieve broker certificate
			X509Certificate brokerCertificate = store.Certificates[0];
			Console.WriteLine("Certificate Subject :" + brokerCertificate.FriendlyDisplayName);
			Console.WriteLine("Valid From :" + brokerCertificate.GetEffectiveDateString());
			Console.WriteLine("Valid To :" + brokerCertificate.GetExpirationDateString());
			Console.WriteLine("Serial No:" + brokerCertificate.GetSerialNumberString());
			//initialize RSA to use public key stored in broker certificate
			RSAParameters publicParam =  brokerCertificate.Key.ExportParameters(false);
			RSACryptoServiceProvider rsCrypto = new RSACryptoServiceProvider();
			rsCrypto.ImportParameters(publicParam);
			//verify digital signature 
			return rsCrypto.VerifyData(data,new SHA1Managed(),signedData);
		}
	}
}
